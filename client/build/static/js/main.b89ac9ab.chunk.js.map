{"version":3,"sources":["components/Header/logo.js","components/Header/navbar.js","components/Header/index.js","components/Footer/footerCopyright.js","components/Footer/index.js","assets/images/salmon-bg.jpg","components/SearchBar/index.js","components/Banner/index.js","components/DishCard/index.js","components/Carousel/index.js","assets/images/spagetti.jpg","components/TestDishes/index.js","utils/queries.js","components/Loading/index.js","components/RecentDishes/index.js","components/PopularDishes/index.js","pages/Home.js","pages/Dish.js","components/MainButton/index.js","utils/mutations.js","utils/auth.js","pages/Login.js","pages/Signup.js","components/UserAccount/index.js","pages/Auth/Dashboard.js","components/CreateDishForm/index.js","pages/Auth/CreateDish.js","App.js","reportWebVitals.js","index.js"],"names":["Logo","className","to","Navbar","Header","FooterCopyright","Footer","SearchBar","Form","Input","fluid","size","icon","placeholder","Banner","customStyle","wallpaper","width","minHeight","backgroundImage","mealImage","backgroundPosition","backgroundRepeat","backgroundSize","display","justifyContent","alignItems","search","minWidth","Grid","columns","style","Row","Column","DishCard","dish","dishId","_id","image","title","username","cook_time","description","Card","Content","Meta","Icon","name","Description","extra","Carousel","dishList","Segment","raised","doubling","stackable","map","index","generateRandomId","Math","floor","random","TestDishes","id","spagettiImg","cookTime","FETCH_WHOLE_DISH_BY_ID","gql","FETCH_FOUR_RANDOM_DISHES","FETCH_LAST_FOUR_DISHES","Loading","textAlign","RecentDishes","useQuery","loading","data","basic","padded","as","lastFourDishes","PopularDishes","fourRandomDishes","Home","Dish","useParams","variables","dishById","ingredients","recipe","ingredientsList","split","recipeList","height","borderRadius","Message","ingredient","List","divided","inverted","relaxed","Item","slice","length","buttonStyles","algoButton","backgroundColor","color","MainButton","Button","type","LOGIN","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","reload","Login","props","useState","email","password","formState","setFormState","useMutation","login","handleChange","error","event","target","value","handleFormSubmit","a","preventDefault","console","log","auth","Divider","horizontal","attached","header","content","onSubmit","label","onChange","warning","Signup","Checkbox","inline","UserAccount","Dashboard","circular","CreateDishForm","TextArea","rows","teal","CreateDish","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b89ac9ab.chunk.js","sourcesContent":["import \"./header.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Logo = () => {\n\treturn (\n\t\t<div className=\"logo\">\n\t\t\t<Link to=\"/\">\n\t\t\t\t<h1>\n\t\t\t\t\t<i className=\"utensils icon\"></i> algo\n\t\t\t\t\t<span className=\"dish\">Dish</span>\n\t\t\t\t</h1>\n\t\t\t</Link>\n\t\t</div>\n\t);\n};\n\nexport default Logo;\n","import \"./header.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n\treturn (\n\t\t<nav>\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\t<Link to=\"/\">Home</Link>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<Link to=\"/dashboard\">Dashboard</Link>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<Link to=\"/login\">Login</Link>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<Link to=\"/signup\">Signup</Link>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</nav>\n\t);\n};\n\nexport default Navbar;\n","import \"./header.css\";\nimport Logo from \"./logo\";\nimport Navbar from \"./navbar\";\n\nconst Header = () => {\n\treturn (\n\t\t<header>\n\t\t\t<Logo></Logo>\n\t\t\t<Navbar></Navbar>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","// import Footer from \"./index\";\n\nconst FooterCopyright = () => {\n  return <p className=\"test\">© 2021 AlgoDish. All Rights Reserved.</p>;\n};\n\nexport default FooterCopyright;\n","import \"./footer.css\";\nimport FooterCopyright from \"./footerCopyright\";\n\nconst Footer = () => {\n\treturn (\n\t\t<footer>\n\t\t\t<FooterCopyright></FooterCopyright>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/salmon-bg.87ff32fb.jpg\";","import { Form } from \"semantic-ui-react\";\n\nconst SearchBar = () => (\n\t<Form.Input fluid size=\"massive\" icon=\"search\" placeholder=\"Search...\" />\n);\nexport default SearchBar;\n","import mealImage from \"../../assets/images/salmon-bg.jpg\";\nimport SearchBar from \"../SearchBar\";\nimport { Grid } from \"semantic-ui-react\";\n\nconst Banner = () => {\n\tconst customStyle = {\n\t\twallpaper: {\n\t\t\twidth: \"100%\",\n\t\t\tminHeight: \"300px\",\n\t\t\tbackgroundImage: `url(${mealImage})`,\n\t\t\tbackgroundPosition: \"center\",\n\t\t\tbackgroundRepeat: \"no-repeat\",\n\t\t\tbackgroundSize: \"cover\",\n\t\t\tdisplay: \"flex\",\n\t\t\tjustifyContent: \"center\",\n\t\t\talignItems: \"center\",\n\t\t},\n\t\tsearch: {\n\t\t\tminWidth: \"60%\",\n\t\t},\n\t};\n\treturn (\n\t\t<Grid columns={1}>\n\t\t\t<div style={customStyle.wallpaper}>\n\t\t\t\t<Grid.Row style={customStyle.search}>\n\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t<SearchBar></SearchBar>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t</Grid.Row>\n\t\t\t</div>\n\t\t</Grid>\n\t);\n};\nexport default Banner;\n","import { Card, Icon } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport \"./dishCard.css\";\n\nconst DishCard = ({ dish }) => {\n\tconst { _id: dishId, image, title, username, cook_time, description } = dish;\n\n\treturn (\n\t\t<Card fluid>\n\t\t\t<Link to={`/dish/${dishId}`}>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"dishImage\"\n\t\t\t\t\tstyle={{ backgroundImage: `url(${image})` }}\n\t\t\t\t></div>\n\t\t\t</Link>\n\t\t\t<Card.Content>\n\t\t\t\t<Card.Header>{title}</Card.Header>\n\t\t\t\t<br />\n\t\t\t\t<Card.Meta>\n\t\t\t\t\t<Icon name=\"user outline\"></Icon>\n\t\t\t\t\t<span className=\"date\">{username}</span>\n\t\t\t\t</Card.Meta>\n\t\t\t\t<br />\n\t\t\t\t<Card.Meta>\n\t\t\t\t\t<Card.Description>\n\t\t\t\t\t\t<div className=\"add-ellipsis\">\n\t\t\t\t\t\t\t<Icon name=\"list alternate outline\"></Icon> {description}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Card.Description>\n\t\t\t\t</Card.Meta>\n\t\t\t</Card.Content>\n\t\t\t<Card.Content extra>\n\t\t\t\t<span>\n\t\t\t\t\t<Icon name=\"clock outline\" /> Cook time {cook_time} mins\n\t\t\t\t</span>\n\t\t\t</Card.Content>\n\t\t</Card>\n\t);\n};\n\nexport default DishCard;\n","import { Grid, Segment } from \"semantic-ui-react\";\nimport DishCard from \"../DishCard\";\n\nconst Carousel = ({ dishList }) => (\n\t<Segment placeholder raised>\n\t\t<Grid doubling stackable columns={4}>\n\t\t\t<Grid.Row>\n\t\t\t\t{dishList.map((dish, index) => (\n\t\t\t\t\t<Grid.Column key={index}>\n\t\t\t\t\t\t<DishCard dish={dish}></DishCard>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t))}\n\t\t\t</Grid.Row>\n\t\t</Grid>\n\t</Segment>\n);\n\nexport default Carousel;\n","export default __webpack_public_path__ + \"static/media/spagetti.3b892b6c.jpg\";","import spagettiImg from \"../../assets/images/spagetti.jpg\";\n\nconst generateRandomId = () => Math.floor(Math.random() * 99);\nconst TestDishes = () => [\n\t{\n\t\tid: generateRandomId(),\n\t\timage: spagettiImg,\n\t\ttitle: `Delicious spagetti ${generateRandomId()}`,\n\t\tusername: \"Elle\",\n\t\tcookTime: generateRandomId(),\n\t\tdescription: \"Spagetti cooked in the Zimbabwe style!\",\n\t},\n\t{\n\t\tid: generateRandomId(),\n\t\timage: spagettiImg,\n\t\ttitle: `Delicious spagetti ${generateRandomId()}`,\n\t\tusername: \"Elle\",\n\t\tcookTime: generateRandomId(),\n\t\tdescription: \"Spagetti cooked in the Zimbabwe style!\",\n\t},\n\t{\n\t\tid: generateRandomId(),\n\t\timage: spagettiImg,\n\t\ttitle: `Delicious spagetti ${generateRandomId()}`,\n\t\tusername: \"Elle\",\n\t\tcookTime: generateRandomId(),\n\t\tdescription: \"Spagetti cooked in the Zimbabwe style!\",\n\t},\n\t{\n\t\tid: generateRandomId(),\n\t\timage: spagettiImg,\n\t\ttitle: `Delicious spagetti ${generateRandomId()}`,\n\t\tusername: \"Elle\",\n\t\tcookTime: generateRandomId(),\n\t\tdescription: \"Spagetti cooked in the Zimbabwe style!\",\n\t},\n];\n\nexport default TestDishes();\n","import { gql } from \"@apollo/client\";\n\n//Get all dishes from the database\nexport const FETCH_ALL_DISHES = gql`\n  query allDishes {\n    allDishes {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n    }\n  }\n`;\n\n//Why is this suddenly not working\nexport const FETCH_DISH_BY_ID = gql`\n  query dishById($id: ID!) {\n    dishById(id: $id) {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n    }\n  }\n`;\n\n//Get One Master Dish\nexport const FETCH_WHOLE_DISH_BY_ID = gql`\n  query dishById($id: ID!) {\n    dishById(id: $id) {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n      ingredients\n      recipe\n    }\n  }\n`;\n\n//Get all dishes by user ID (created_dishes)\nexport const FETCH_CREATED_DISHES = gql`\n  query userDishes($id: ID!) {\n    userDishes(id: $id) {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n      ingredients\n    }\n  }\n`;\n\n//five random dishes\nexport const FETCH_FOUR_RANDOM_DISHES = gql`\n  query fourRandomDishes {\n    fourRandomDishes {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n    }\n  }\n`;\n\n//last five dishes\nexport const FETCH_LAST_FOUR_DISHES = gql`\n  query lastFourDishes {\n    lastFourDishes {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n    }\n  }\n`;\n\n//Get dishes by name\nexport const FETCH_DISH_BY_NAME = gql`\n  query dishesByName($title: String!) {\n    dishesByName(title: $title) {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n    }\n  }\n`;\n\n//Get all users\nexport const FETCH_USERS = gql`\n  query users {\n    users {\n      _id\n      username\n    }\n  }\n`;\n\n//Get user by ID\nexport const FETCH_USER_BY_ID = gql`\n  query userById($id: ID!) {\n    userById(id: $id) {\n      _id\n      username\n      email\n    }\n  }\n`;\n","import { Segment, Header, Icon } from \"semantic-ui-react\";\n\nconst Loading = () => {\n\treturn (\n\t\t<Segment placeholder raised textAlign=\"center\">\n\t\t\t<Header textAlign=\"center\" size=\"large\">\n\t\t\t\t<Icon name=\"spinner\"></Icon>\n\t\t\t</Header>\n\t\t</Segment>\n\t);\n};\n\nexport default Loading;\n","import { Header, Segment } from \"semantic-ui-react\";\nimport Carousel from \"../Carousel\";\nimport TestDishes from \"../TestDishes\";\nimport { FETCH_LAST_FOUR_DISHES } from \"../../utils/queries\";\nimport { useQuery } from \"@apollo/client\";\nimport Loading from \"../Loading\";\n\nconst RecentDishes = () => {\n\tconst { loading, data } = useQuery(FETCH_LAST_FOUR_DISHES);\n\tconst dishList = () => data?.lastFourDishes || TestDishes;\n\treturn (\n\t\t<Segment basic padded=\"very\">\n\t\t\t{loading ? (\n\t\t\t\t<Loading></Loading>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<Header as=\"h2\">\n\t\t\t\t\t\t<span className=\"cadet-color\">Recently added dishes</span>\n\t\t\t\t\t</Header>\n\t\t\t\t\t<Carousel dishList={dishList()}></Carousel>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Segment>\n\t);\n};\n\nexport default RecentDishes;\n","import { Header, Segment } from \"semantic-ui-react\";\nimport Carousel from \"../Carousel\";\nimport TestDishes from \"../TestDishes\";\nimport { FETCH_FOUR_RANDOM_DISHES } from \"../../utils/queries\";\nimport { useQuery } from \"@apollo/client\";\nimport Loading from \"../Loading\";\n\nconst PopularDishes = () => {\n\tconst { loading, data } = useQuery(FETCH_FOUR_RANDOM_DISHES);\n\tconst dishList = () => data?.fourRandomDishes || TestDishes;\n\treturn (\n\t\t<Segment basic padded=\"very\">\n\t\t\t{loading ? (\n\t\t\t\t<Loading></Loading>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<Header as=\"h2\">\n\t\t\t\t\t\t<span className=\"cadet-color\">Most popular dishes</span>\n\t\t\t\t\t</Header>\n\t\t\t\t\t<Carousel dishList={dishList()}></Carousel>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Segment>\n\t);\n};\n\nexport default PopularDishes;\n","import { Segment } from \"semantic-ui-react\";\nimport Banner from \"../components/Banner\";\nimport RecentDishes from \"../components/RecentDishes\";\nimport PopularDishes from \"../components/PopularDishes\";\n\nconst Home = () => {\n\treturn (\n\t\t<>\n\t\t\t<Segment basic>\n\t\t\t\t<Banner></Banner>\n\t\t\t</Segment>\n\t\t\t<RecentDishes></RecentDishes>\n\t\t\t<PopularDishes></PopularDishes>\n\t\t</>\n\t);\n};\n\nexport default Home;\n","import { Header, Icon, Segment, Message, List } from \"semantic-ui-react\";\nimport { FETCH_WHOLE_DISH_BY_ID } from \"../utils/queries\";\nimport { useQuery } from \"@apollo/client\";\nimport { useParams } from \"react-router\";\nimport Loading from \"../components/Loading\";\n\nconst Dish = () => {\n\tconst dishStyles = {\n\t\tdishBackground: {\n\t\t\twidth: \"100%\",\n\t\t\theight: \"200px\",\n\t\t\tbackgroundPosition: \"center\",\n\t\t\tbackgroundRepeat: \"no-repeat\",\n\t\t\tbackgroundSize: \"cover\",\n\t\t\tborderRadius: \"10px\",\n\t\t},\n\t};\n\n\tconst { id: dishId } = useParams();\n\tconst { loading, data } = useQuery(FETCH_WHOLE_DISH_BY_ID, {\n\t\tvariables: { id: dishId },\n\t});\n\n\tconst {\n\t\ttitle,\n\t\timage,\n\t\tusername,\n\t\tdescription,\n\t\tingredients,\n\t\trecipe,\n\t\tcook_time,\n\t} = data?.dishById || {};\n\n\tconst ingredientsList = ingredients ? ingredients.split(\",\") : [];\n\tconst recipeList = recipe ? recipe.split(\".\") : [];\n\n\treturn (\n\t\t<Segment basic padded=\"very\">\n\t\t\t{loading ? (\n\t\t\t\t<Loading></Loading>\n\t\t\t) : (\n\t\t\t\t<Segment raised padded=\"very\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tbackgroundImage: `url(${image})`,\n\t\t\t\t\t\t\t...dishStyles.dishBackground,\n\t\t\t\t\t\t}}\n\t\t\t\t\t></div>\n\t\t\t\t\t<Header as=\"h3\" size=\"huge\">\n\t\t\t\t\t\t<Icon name=\"utensils\"></Icon> {title}\n\t\t\t\t\t</Header>\n\t\t\t\t\t<Message>\n\t\t\t\t\t\t<Message.Header>\n\t\t\t\t\t\t\t<Icon name=\"user outline\"></Icon> {username} says:\n\t\t\t\t\t\t</Message.Header>\n\t\t\t\t\t\t<p>{description}</p>\n\t\t\t\t\t</Message>\n\t\t\t\t\t<Message>\n\t\t\t\t\t\t<Message.Header>Ingredients</Message.Header>\n\t\t\t\t\t\t<Segment>\n\t\t\t\t\t\t\t{ingredientsList.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t<List key={index} divided inverted relaxed>\n\t\t\t\t\t\t\t\t\t<List.Item>\n\t\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t\t{index + 1}. {ingredient}\n\t\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Segment>\n\t\t\t\t\t</Message>\n\t\t\t\t\t<Message>\n\t\t\t\t\t\t<Message.Header>Recipe</Message.Header>\n\t\t\t\t\t\t<Segment>\n\t\t\t\t\t\t\t{recipeList\n\t\t\t\t\t\t\t\t.slice(0, recipeList.length - 1)\n\t\t\t\t\t\t\t\t.map((recipe, index) => (\n\t\t\t\t\t\t\t\t\t<List key={index} divided inverted relaxed>\n\t\t\t\t\t\t\t\t\t\t<List.Item>\n\t\t\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t{index + 1}. {recipe}\n\t\t\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Segment>\n\t\t\t\t\t</Message>\n\t\t\t\t\t<Message>\n\t\t\t\t\t\t<Message.Header>Cook Time</Message.Header>\n\t\t\t\t\t\t<Segment>\n\t\t\t\t\t\t\t<List divided inverted relaxed>\n\t\t\t\t\t\t\t\t<List.Item>\n\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\tEstimated ready time is {cook_time} minutes!\n\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t</Segment>\n\t\t\t\t\t</Message>\n\t\t\t\t</Segment>\n\t\t\t)}\n\t\t</Segment>\n\t);\n};\n\nexport default Dish;\n","import { Button } from \"semantic-ui-react\";\n\nexport const buttonStyles = {\n\talgoButton: {\n\t\tbackgroundColor: \"#1a1b41\",\n\t\tcolor: \"#ffffff\",\n\t},\n};\n\nconst MainButton = ({ title }) => {\n\treturn (\n\t\t<Button type=\"submit\" size=\"large\" style={buttonStyles.algoButton}>\n\t\t\t{title}\n\t\t</Button>\n\t);\n};\nexport default MainButton;\n","import { gql } from \"@apollo/client\";\n\n//Create A User\nexport const CREATE_NEW_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        username\n        _id\n      }\n    }\n  }\n`;\n\n//Create A Dish\n\n// to break this down: for a dish, we are taking in from the user a title (string) and an image (string). Then, we take in ingredients which is an array of strings. THEN, we take in instructions which is an array of objects that take in steps which itself is an array of objects, each containing time (Int) and a step (string)\n//I'm not sure the notation to add the username as the dishAuthor\n\n// export const CREATE_NEW_DISH = gql``;\n\n//Delete A Dish by dish _id\n// export const DELETE_DISH = gql``;\n\n//Login\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import decode from \"jwt-decode\";\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    const decoded = decode(token);\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem(\"id_token\");\n      return true;\n    }\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem(\"id_token\");\n  }\n\n  login(idToken) {\n    localStorage.setItem(\"id_token\", idToken);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    localStorage.removeItem(\"id_token\");\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();\n","import { useState } from \"react\";\nimport { Segment, Form, Grid, Message, Icon, Divider } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport MainButton from \"../components/MainButton\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN } from \"../utils/mutations\";\nimport auth from \"../utils/auth\";\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: \"\", password: \"\" });\n  const [login, { error, data }] = useMutation(LOGIN);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n    // console.log(\"Name: \", name, \" Value: \", value);\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n      auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <Segment basic>\n      <Divider horizontal></Divider>\n      <Grid columns={3} stackable>\n        <Grid.Row>\n          <Grid.Column></Grid.Column>\n          <Grid.Column>\n            <Segment raised>\n              <div>\n                <Message\n                  attached\n                  header=\"Account Login\"\n                  content=\"Enter your credentials to login into your account\"\n                />\n                <Form\n                  className=\"attached fluid segment\"\n                  onSubmit={handleFormSubmit}\n                >\n                  <Form.Input\n                    label=\"Email\"\n                    placeholder=\"email\"\n                    type=\"email\"\n                    name=\"email\"\n                    value={formState.email}\n                    onChange={handleChange}\n                  />\n                  <Form.Input\n                    label=\"Password\"\n                    placeholder=\"password\"\n                    type=\"password\"\n                    name=\"password\"\n                    value={formState.password}\n                    onChange={handleChange}\n                  />\n                  <MainButton color=\"blue\" title=\"Login\"></MainButton>\n                </Form>\n                <Message attached=\"bottom\" warning>\n                  <Icon name=\"user\" />\n                  New user?&nbsp;\n                  <Link to=\"/signup\">Sign up</Link>\n                  &nbsp;instead.\n                </Message>\n              </div>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column></Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  );\n};\nexport default Login;\n","import { Segment, Form, Grid, Message, Icon, Divider } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport MainButton from \"../components/MainButton\";\n\nconst Signup = () => {\n  return (\n    <Segment basic>\n      <Divider horizontal></Divider>\n      <Grid columns={3} stackable>\n        <Grid.Row>\n          <Grid.Column></Grid.Column>\n          <Grid.Column>\n            <Segment raised>\n              <div>\n                <Message\n                  attached\n                  header=\"Create Account\"\n                  content=\"Fill out the form below to create your account\"\n                />\n                <Form className=\"attached fluid segment\">\n                  <Form.Input\n                    label=\"Username\"\n                    placeholder=\"Username\"\n                    type=\"text\"\n                  />\n                  <Form.Input label=\"Email\" placeholder=\"email\" type=\"email\" />\n                  <Form.Input\n                    label=\"Password\"\n                    placeholder=\"password\"\n                    type=\"password\"\n                  />\n                  <Form.Checkbox\n                    inline\n                    label=\"I agree to the terms and conditions\"\n                  />\n                  <MainButton color=\"blue\" title=\"Create Account\"></MainButton>\n                </Form>\n                <Message attached=\"bottom\" warning>\n                  <Icon name=\"user\" />\n                  Already signed up?&nbsp;\n                  <Link to=\"/login\">Login here</Link>\n                  &nbsp;instead.\n                </Message>\n              </div>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column></Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  );\n};\nexport default Signup;\n","import { Header, Icon } from \"semantic-ui-react\";\n\nconst UserAccount = () => {\n\treturn (\n\t\t<Header as=\"h2\">\n\t\t\t<Icon name=\"user outline\"></Icon>\n\t\t\tWelcome back, Elle!\n\t\t</Header>\n\t);\n};\n\nexport default UserAccount;\n","import {\n  Segment,\n  Header,\n  Grid,\n  Button,\n  Icon,\n  Divider,\n} from \"semantic-ui-react\";\nimport { Link, Redirect, useParams } from \"react-router-dom\";\nimport { buttonStyles } from \"../../components/MainButton\";\nimport Carousel from \"../../components/Carousel\";\nimport TestDishes from \"../../components/TestDishes\";\nimport UserAccount from \"../../components/UserAccount\";\nimport auth from \"../../utils/auth\";\nimport { useQuery } from \"@apollo/client\";\nimport { FETCH_USER_BY_ID } from \"../../utils/queries\";\n\nconst Dashboard = () => {\n  // const { username: userParam } = useParams();\n\n  // const { loading, data } = useQuery(userParam FETCH_USER_BY_ID, {\n  //   variables: { username: userParam },\n  // });\n\n  // const user = data?.me || data?.user || {};\n  // // redirect to personal profile page if username is yours\n  // if (auth.loggedIn() && auth.getProfile().data.username === userParam) {\n  //   return <Redirect to=\"/me\" />;\n  // }\n\n  // if (loading) {\n  //   return <div>Loading...</div>;\n  // }\n\n  // if (!user?.username) {\n  //   return (\n  // \t<h4>\n  // \t  You need to be logged in to see this. Use the navigation links above to\n  // \t  sign up or log in!\n  // \t</h4>\n  //   );\n  // }\n\n  return (\n    <Segment basic padded=\"very\">\n      <Segment raised padded=\"very\">\n        <Grid columns={2} stackable>\n          <Grid.Row>\n            <Grid.Column>\n              <UserAccount></UserAccount>\n            </Grid.Column>\n            <Grid.Column>\n              <Link to=\"create-dish\">\n                <Button\n                  fluid\n                  style={buttonStyles.algoButton}\n                  circular\n                  size=\"huge\"\n                >\n                  <Icon name=\"plus\"></Icon>\n                  Create new dish\n                </Button>\n              </Link>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <Divider horizontal></Divider>\n\n        <Divider horizontal></Divider>\n        <Header as=\"h2\">\n          <span className=\"cadet-color\">Dishes you created</span>\n        </Header>\n        <Carousel dishList={TestDishes}></Carousel>\n\n        <Divider horizontal></Divider>\n        <Header as=\"h2\">\n          <span className=\"cadet-color\">Your favourite dishes</span>\n        </Header>\n        <Carousel dishList={TestDishes}></Carousel>\n      </Segment>\n    </Segment>\n  );\n};\n\nexport default Dashboard;\n","import { Message, Form, Icon, Header } from \"semantic-ui-react\";\nimport MainButton from \"../MainButton\";\n\nconst CreateDishForm = () => {\n\treturn (\n\t\t<div>\n\t\t\t<Message>\n\t\t\t\t<Header as=\"h3\">Create a new dish</Header>\n\t\t\t</Message>\n\t\t\t<Form className=\"attached fluid segment\">\n\t\t\t\t<Form.Input label=\"Dish Title\" placeholder=\"name of dish\" type=\"text\" />\n\t\t\t\t<Form.TextArea\n\t\t\t\t\tlabel=\"Dish Ingredients\"\n\t\t\t\t\tplaceholder=\"example: water, red peppers, oil...\"\n\t\t\t\t\trows={5}\n\t\t\t\t/>\n\t\t\t\t<Form.TextArea\n\t\t\t\t\tlabel=\"Dish Procedure\"\n\t\t\t\t\tplaceholder=\"example: step 1, heat water for 5 mins;\"\n\t\t\t\t\trows={5}\n\t\t\t\t/>\n\t\t\t\t<MainButton title=\"Submit Dish\"></MainButton>\n\t\t\t</Form>\n\t\t\t<Message attached=\"bottom\" teal>\n\t\t\t\t<Icon name=\"utensils\" />\n\t\t\t\tProperly describe the steps and ingredents need to prepare this dish.\n\t\t\t</Message>\n\t\t</div>\n\t);\n};\n\nexport default CreateDishForm;\n","import { Grid, Segment, Icon, Button } from \"semantic-ui-react\";\nimport UserAccount from \"../../components/UserAccount\";\nimport CreateDishForm from \"../../components/CreateDishForm\";\nimport { buttonStyles } from \"../../components/MainButton\";\nimport { Link } from \"react-router-dom\";\n\nconst CreateDish = () => {\n\treturn (\n\t\t<Segment basic padded=\"very\">\n\t\t\t<Segment raised padded=\"very\">\n\t\t\t\t<Grid columns={2} stackable>\n\t\t\t\t\t<Grid.Row>\n\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t<UserAccount></UserAccount>\n\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t<Grid.Column textAlign=\"right\">\n\t\t\t\t\t\t\t<Link to=\"/dashboard\">\n\t\t\t\t\t\t\t\t<Button size=\"large\" style={buttonStyles.algoButton}>\n\t\t\t\t\t\t\t\t\t<Icon name=\"arrow circle left\"></Icon> Back to dashboard\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t</Grid.Row>\n\n\t\t\t\t\t<Grid.Row>\n\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t<CreateDishForm></CreateDishForm>\n\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t<Grid.Column></Grid.Column>\n\t\t\t\t\t</Grid.Row>\n\t\t\t\t</Grid>\n\t\t\t</Segment>\n\t\t</Segment>\n\t);\n};\n\nexport default CreateDish;\n","import \"./App.css\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./pages/Home\";\nimport Dish from \"./pages/Dish\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Dashboard from \"./pages/Auth/Dashboard\";\nimport CreateDish from \"./pages/Auth/CreateDish\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n\turi: \"/graphql\",\n\tcache: new InMemoryCache(),\n});\n\nconst App = () => {\n\treturn (\n\t\t<ApolloProvider client={client}>\n\t\t\t<BrowserRouter>\n\t\t\t\t{/* display header */}\n\t\t\t\t<Header></Header>\n\n\t\t\t\t{/* display requested pages */}\n\t\t\t\t<main>\n\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t<Home></Home>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/dish/:id\">\n\t\t\t\t\t\t<Dish></Dish>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/login\">\n\t\t\t\t\t\t<Login></Login>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/signup\">\n\t\t\t\t\t\t<Signup></Signup>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/dashboard\">\n\t\t\t\t\t\t<Dashboard></Dashboard>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/create-dish\">\n\t\t\t\t\t\t<CreateDish></CreateDish>\n\t\t\t\t\t</Route>\n\t\t\t\t</main>\n\n\t\t\t\t{/* display footer */}\n\t\t\t\t<Footer></Footer>\n\t\t\t</BrowserRouter>\n\t\t</ApolloProvider>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}