{"version":3,"sources":["components/Header/logo.js","utils/auth.js","components/Header/navbar.js","components/Header/index.js","components/Footer/footerCopyright.js","components/Footer/index.js","assets/images/salmon-bg.jpg","components/SearchBar/index.js","components/Banner/index.js","components/DishCard/index.js","components/Carousel/index.js","assets/images/spagetti.jpg","components/TestDishes/index.js","utils/queries.js","components/Loading/index.js","components/RecentDishes/index.js","components/PopularDishes/index.js","pages/Home.js","pages/Dish.js","pages/Search.js","components/MainButton/index.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/UserAccount/index.js","pages/Auth/Dashboard.js","components/CreateDishForm/index.js","pages/Auth/CreateDish.js","App.js","reportWebVitals.js","index.js"],"names":["Logo","className","to","decode","this","getToken","localStorage","getItem","userData","setItem","token","user","_id","username","removeItem","window","location","Navbar","Auth","loggedIn","getUserId","onClick","logout","Header","FooterCopyright","Footer","SearchBar","useState","search","formState","setFormState","handleFormSubmit","event","a","preventDefault","console","log","Form","onSubmit","autoComplete","Input","fluid","size","icon","placeholder","name","type","value","onChange","target","Banner","customStyle","wallpaper","width","minHeight","backgroundImage","mealImage","backgroundPosition","backgroundRepeat","backgroundSize","display","justifyContent","alignItems","minWidth","Grid","columns","style","Row","Column","DishCard","dish","dishId","image","title","cook_time","description","Card","Content","Meta","Icon","Description","extra","Carousel","dishList","Segment","raised","doubling","stackable","map","index","generateRandomId","Math","floor","random","TestDishes","id","spagettiImg","cookTime","FETCH_WHOLE_DISH_BY_ID","gql","FETCH_FOUR_RANDOM_DISHES","FETCH_LAST_FOUR_DISHES","FETCH_DISH_BY_NAME","FETCH_USER_BY_ID","Loading","textAlign","RecentDishes","useQuery","loading","data","basic","padded","as","lastFourDishes","PopularDishes","fourRandomDishes","Home","Dish","useParams","variables","dishById","ingredients","recipe","ingredientsList","split","recipeList","height","borderRadius","Message","ingredient","List","divided","inverted","relaxed","Item","slice","length","Search","dishTitle","query","results","dishesByName","buttonStyles","algoButton","backgroundColor","color","MainButton","Button","CREATE_NEW_USER","CREATE_NEW_DISH","LOGIN","Login","email","password","useMutation","login","handleChange","error","Divider","horizontal","circular","attached","header","content","label","warning","Signup","addUser","Checkbox","inline","UserAccount","Dashboard","userId","userById","CreateDishForm","getUsername","createNewDish","uploadDish","TextArea","rows","teal","CreateDish","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAgBeA,EAbF,WACZ,OACC,qBAAKC,UAAU,OAAf,SACC,cAAC,IAAD,CAAMC,GAAG,IAAT,SACC,+BACC,mBAAGD,UAAU,kBADd,QAEC,sBAAMA,UAAU,OAAhB,0B,2BCwCU,M,0FA3Cd,WACC,OAAOE,YAAOC,KAAKC,c,sBAIpB,WAEC,QADcD,KAAKC,a,sBAIpB,WAEC,OAAOC,aAAaC,QAAQ,c,uBAG7B,WAEC,OAAOD,aAAaC,QAAQ,a,yBAG7B,WAEC,OAAOD,aAAaC,QAAQ,mB,mBAG7B,SAAMC,GAELF,aAAaG,QAAQ,WAAYD,EAASE,OAC1CJ,aAAaG,QAAQ,UAAWD,EAASG,KAAKC,KAC9CN,aAAaG,QAAQ,gBAAiBD,EAASG,KAAKE,Y,oBAIrD,WAECP,aAAaQ,WAAW,YACxBR,aAAaQ,WAAW,WACxBR,aAAaQ,WAAW,iBAExBC,OAAOC,SAAW,Q,MCLLC,EApCA,WACd,OACC,8BACC,+BACC,6BACC,cAAC,IAAD,CAAMf,GAAG,IAAT,oBAEAgB,EAAKC,WACL,qCACC,6BACC,cAAC,IAAD,CAAMjB,GAAE,qBAAgBgB,EAAKE,aAA7B,yBAED,6BACC,cAAC,IAAD,CAAMlB,GAAG,IAAImB,QAASH,EAAKI,OAA3B,yBAMF,qCACC,6BACC,cAAC,IAAD,CAAMpB,GAAG,SAAT,qBAED,6BACC,cAAC,IAAD,CAAMA,GAAG,UAAT,yBAIH,6BACC,cAAC,IAAD,CAAMA,GAAG,SAAT,2BCpBUqB,EATA,WACd,OACC,mCACC,cAAC,EAAD,IACA,cAAC,EAAD,QCFYC,G,OAJS,WACtB,OAAO,mBAAGvB,UAAU,OAAb,wDCQMwB,EARA,WACd,OACC,iCACC,cAAC,EAAD,O,SCNY,MAA0B,sC,0DCuC1BC,EApCG,WACjB,MAAkCC,mBAAS,CAC1CC,OAAQ,KADT,mBAAOC,EAAP,KAAkBC,EAAlB,KAaMC,EAAgB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACxBD,EAAME,iBACNC,QAAQC,IAAIP,GAGZd,OAAOC,SAAP,kBAA6Ba,EAAUD,QALf,2CAAH,sDAOtB,OACC,cAACS,EAAA,EAAD,CAAMC,SAAUP,EAAkBQ,aAAa,MAA/C,SACC,cAACF,EAAA,EAAKG,MAAN,CACCC,OAAK,EACLC,KAAK,UACLC,KAAK,SACLC,YAAY,YACZC,KAAK,SACLC,KAAK,OACLC,MAAOlB,EAAUD,OACjBoB,SA1BkB,SAAChB,GACrB,MAAwBA,EAAMiB,OAAtBJ,EAAR,EAAQA,KAAME,EAAd,EAAcA,MAEdjB,EAAa,2BACTD,GADQ,kBAEVgB,EAAOE,W,SCoBIG,EA7BA,WACd,IAAMC,EAAc,CACnBC,UAAW,CACVC,MAAO,OACPC,UAAW,QACXC,gBAAgB,OAAD,OAASC,EAAT,KACfC,mBAAoB,SACpBC,iBAAkB,YAClBC,eAAgB,QAChBC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAEblC,OAAQ,CACPmC,SAAU,QAGZ,OACC,cAACC,EAAA,EAAD,CAAMC,QAAS,EAAf,SACC,qBAAKC,MAAOf,EAAYC,UAAxB,SACC,cAACY,EAAA,EAAKG,IAAN,CAAUD,MAAOf,EAAYvB,OAA7B,SACC,cAACoC,EAAA,EAAKI,OAAN,UACC,cAAC,EAAD,a,0BCcSC,G,OApCE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACNC,EAA2DD,EAAhE1D,IAAa4D,EAAmDF,EAAnDE,MAAOC,EAA4CH,EAA5CG,MAAO5D,EAAqCyD,EAArCzD,SAAU6D,EAA2BJ,EAA3BI,UAAWC,EAAgBL,EAAhBK,YAExD,OACC,eAACC,EAAA,EAAD,CAAMnC,OAAK,EAAX,UACC,cAAC,IAAD,CAAMvC,GAAE,gBAAWqE,GAAnB,SACC,qBACCtE,UAAU,YACViE,MAAO,CAAEX,gBAAgB,OAAD,OAASiB,EAAT,UAG1B,eAACI,EAAA,EAAKC,QAAN,WACC,cAACD,EAAA,EAAKrD,OAAN,UAAckD,IACd,uBACA,eAACG,EAAA,EAAKE,KAAN,WACC,cAACC,EAAA,EAAD,CAAMlC,KAAK,iBACX,sBAAM5C,UAAU,OAAhB,SAAwBY,OAEzB,uBACA,cAAC+D,EAAA,EAAKE,KAAN,UACC,cAACF,EAAA,EAAKI,YAAN,UACC,sBAAK/E,UAAU,eAAf,UACC,cAAC8E,EAAA,EAAD,CAAMlC,KAAK,2BADZ,IAC8C8B,YAKjD,cAACC,EAAA,EAAKC,QAAN,CAAcI,OAAK,EAAnB,SACC,iCACC,cAACF,EAAA,EAAD,CAAMlC,KAAK,kBADZ,cAC0C6B,EAD1C,kBCfWQ,EAdE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,cAACC,EAAA,EAAD,CAASxC,aAAW,EAACyC,QAAM,EAA3B,SACC,cAACrB,EAAA,EAAD,CAAMsB,UAAQ,EAACC,WAAS,EAACtB,QAAS,EAAlC,SACC,cAACD,EAAA,EAAKG,IAAN,UACEgB,EAASK,KAAI,SAAClB,EAAMmB,GAAP,OACb,cAACzB,EAAA,EAAKI,OAAN,UACC,cAAC,EAAD,CAAUE,KAAMA,KADCmB,aCRR,MAA0B,qCCE5BC,EAAmB,kBAAMC,KAAKC,MAAsB,GAAhBD,KAAKE,WAoCvCC,EAnCU,CACxB,CACCC,GAAIL,IACJlB,MAAOwB,EACPvB,MAAM,sBAAD,OAAwBiB,KAC7B7E,SAAU,OACVoF,SAAUP,IACVf,YAAa,0CAEd,CACCoB,GAAIL,IACJlB,MAAOwB,EACPvB,MAAM,sBAAD,OAAwBiB,KAC7B7E,SAAU,OACVoF,SAAUP,IACVf,YAAa,0CAEd,CACCoB,GAAIL,IACJlB,MAAOwB,EACPvB,MAAM,sBAAD,OAAwBiB,KAC7B7E,SAAU,OACVoF,SAAUP,IACVf,YAAa,0CAEd,CACCoB,GAAIL,IACJlB,MAAOwB,EACPvB,MAAM,sBAAD,OAAwBiB,KAC7B7E,SAAU,OACVoF,SAAUP,IACVf,YAAa,2C,iBCHFuB,GA5BmBC,YAAH,uKAcGA,YAAH,wLAcSA,YAAH,0NA+BtBC,IAfuBD,YAAH,+MAeOA,YAAH,sLAcxBE,GAAyBF,YAAH,iLActBG,GAAqBH,YAAH,6MAwBlBI,IAVcJ,YAAH,iGAUQA,YAAH,wI,UCtGdK,GAVC,WACf,OACC,cAACpB,EAAA,EAAD,CAASxC,aAAW,EAACyC,QAAM,EAACoB,UAAU,SAAtC,SACC,cAAC,IAAD,CAAQA,UAAU,SAAS/D,KAAK,QAAhC,SACC,cAACqC,EAAA,EAAD,CAAMlC,KAAK,iBCoBA6D,GAnBM,WACpB,MAA0BC,aAASN,IAA3BO,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAEjB,OACC,cAACzB,EAAA,EAAD,CAAS0B,OAAK,EAACC,OAAO,OAAtB,SACEH,EACA,cAAC,GAAD,IAEA,qCACC,cAAC,IAAD,CAAQI,GAAG,KAAX,SACC,sBAAM/G,UAAU,cAAhB,qCAED,cAAC,EAAD,CAAUkF,UAVa,OAAJ0B,QAAI,IAAJA,OAAA,EAAAA,EAAMI,iBAAkBnB,UCiBjCoB,GAnBO,WACrB,MAA0BP,aAASP,IAA3BQ,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAEjB,OACC,cAACzB,EAAA,EAAD,CAAS0B,OAAK,EAACC,OAAO,OAAtB,SACEH,EACA,cAAC,GAAD,IAEA,qCACC,cAAC,IAAD,CAAQI,GAAG,KAAX,SACC,sBAAM/G,UAAU,cAAhB,mCAED,cAAC,EAAD,CAAUkF,UAVa,OAAJ0B,QAAI,IAAJA,OAAA,EAAAA,EAAMM,mBAAoBrB,UCQnCsB,GAZF,WACZ,OACC,qCACC,cAAChC,EAAA,EAAD,CAAS0B,OAAK,EAAd,SACC,cAAC,EAAD,MAED,cAAC,GAAD,IACA,cAAC,GAAD,Q,oBC6FYO,GAnGF,WACZ,IAWY9C,EAAW+C,cAAfvB,GACR,EAA0BY,aAAST,EAAwB,CAC1DqB,UAAW,CAAExB,GAAIxB,KADVqC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAIjB,GAQQ,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMW,WAAY,GAPrB/C,EADD,EACCA,MACAD,EAFD,EAECA,MACA3D,EAHD,EAGCA,SACA8D,EAJD,EAICA,YACA8C,EALD,EAKCA,YACAC,EAND,EAMCA,OACAhD,EAPD,EAOCA,UAGKiD,EAAkBF,EAAcA,EAAYG,MAAM,KAAO,GACzDC,EAAaH,EAASA,EAAOE,MAAM,KAAO,GAEhD,OACC,cAACxC,EAAA,EAAD,CAAS0B,OAAK,EAACC,OAAO,OAAtB,SACEH,EACA,cAAC,GAAD,IAEA,eAACxB,EAAA,EAAD,CAASC,QAAM,EAAC0B,OAAO,OAAvB,UACC,qBACC7C,MAAK,aACJX,gBAAgB,OAAD,OAASiB,EAAT,MApCJ,CACfnB,MAAO,OACPyE,OAAQ,QACRrE,mBAAoB,SACpBC,iBAAkB,YAClBC,eAAgB,QAChBoE,aAAc,WAkCZ,eAAC,IAAD,CAAQf,GAAG,KAAKtE,KAAK,OAArB,UACC,cAACqC,EAAA,EAAD,CAAMlC,KAAK,aADZ,IACgC4B,KAEhC,eAACuD,GAAA,EAAD,WACC,eAACA,GAAA,EAAQzG,OAAT,WACC,cAACwD,EAAA,EAAD,CAAMlC,KAAK,iBADZ,IACoChC,EADpC,YAGA,4BAAI8D,OAEL,eAACqD,GAAA,EAAD,WACC,cAACA,GAAA,EAAQzG,OAAT,0BACA,cAAC6D,EAAA,EAAD,UACEuC,EAAgBnC,KAAI,SAACyC,EAAYxC,GAAb,OACpB,cAACyC,GAAA,EAAD,CAAkBC,SAAO,EAACC,UAAQ,EAACC,SAAO,EAA1C,SACC,cAACH,GAAA,EAAKI,KAAN,UACC,eAACJ,GAAA,EAAKrD,QAAN,WACEY,EAAQ,EADV,KACewC,QAHNxC,WAUd,eAACuC,GAAA,EAAD,WACC,cAACA,GAAA,EAAQzG,OAAT,qBACA,cAAC6D,EAAA,EAAD,UACEyC,EACCU,MAAM,EAAGV,EAAWW,OAAS,GAC7BhD,KAAI,SAACkC,EAAQjC,GAAT,OACJ,cAACyC,GAAA,EAAD,CAAkBC,SAAO,EAACC,UAAQ,EAACC,SAAO,EAA1C,SACC,cAACH,GAAA,EAAKI,KAAN,UACC,eAACJ,GAAA,EAAKrD,QAAN,WACEY,EAAQ,EADV,KACeiC,QAHNjC,WAUf,eAACuC,GAAA,EAAD,WACC,cAACA,GAAA,EAAQzG,OAAT,wBACA,cAAC6D,EAAA,EAAD,UACC,cAAC8C,GAAA,EAAD,CAAMC,SAAO,EAACC,UAAQ,EAACC,SAAO,EAA9B,SACC,cAACH,GAAA,EAAKI,KAAN,UACC,eAACJ,GAAA,EAAKrD,QAAN,sCAC0BH,EAD1B,8BCnDM+D,GAlCA,WACd,IAAeC,EAAcpB,cAArBqB,MACR,EAA0BhC,aAASL,GAAoB,CACtDiB,UAAW,CAAE9C,MAAOiE,KADb9B,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAGX+B,GAAc,OAAJ/B,QAAI,IAAJA,OAAA,EAAAA,EAAMgC,eAAgB,GAEtC,OADA1G,QAAQC,IAAI,mBAAoBwG,GAE/B,cAACxD,EAAA,EAAD,CAAS0B,OAAK,EAACC,OAAO,OAAtB,SACEH,EACA,cAAC,GAAD,IAEA,eAACxB,EAAA,EAAD,CAASC,QAAM,EAAC0B,OAAO,OAAvB,UACC,cAACiB,GAAA,EAAD,UACC,eAACA,GAAA,EAAQzG,OAAT,WACC,cAACwD,EAAA,EAAD,CAAMlC,KAAK,WACV+F,EAAQJ,OAFV,uBAEsCE,OAGvC,cAAC1E,EAAA,EAAD,CAAMsB,UAAQ,EAACC,WAAS,EAACtB,QAAS2E,EAAQJ,OAA1C,SACC,cAACxE,EAAA,EAAKG,IAAN,UACEyE,EAAQpD,KAAI,SAAClB,EAAMmB,GAAP,OACZ,cAACzB,EAAA,EAAKI,OAAN,UACC,cAAC,EAAD,CAAUE,KAAMA,KADCmB,gB,oBC3BbqD,GAAe,CAC3BC,WAAY,CACXC,gBAAiB,UACjBC,MAAO,YAWMC,GAPI,SAAC,GAAe,IAAbzE,EAAY,EAAZA,MACrB,OACC,cAAC0E,GAAA,EAAD,CAAQrG,KAAK,SAASJ,KAAK,QAAQwB,MAAO4E,GAAaC,WAAvD,SACEtE,K,UCTS2E,GAAkBjD,YAAH,kQAiBfkD,GAAkBlD,YAAH,qXAYfmD,GAAQnD,YAAH,mMCmGHoD,GAlHD,WACb,MAAkC5H,mBAAS,CAAE6H,MAAO,GAAIC,SAAU,KAAlE,mBAAO5H,EAAP,KAAkBC,EAAlB,KACA,EAA0B4H,aAAYJ,IAAtC,mBAAOK,EAAP,KAAgB9C,EAAhB,KAAgBA,KAGV+C,EAAe,SAAC5H,GACrB,MAAwBA,EAAMiB,OAAtBJ,EAAR,EAAQA,KAAME,EAAd,EAAcA,MAEdjB,EAAa,2BACTD,GADQ,kBAEVgB,EAAOE,MAKJhB,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACxBD,EAAME,iBACNC,QAAQC,IAAIP,GAFY,kBAIA8H,EAAM,CAC5BpC,UAAU,eAAM1F,KALM,gBAIfgF,EAJe,EAIfA,KAIR3F,EAAKyI,MAAM9C,EAAK8C,OARO,kDAUvBxH,QAAQ0H,MAAR,MAVuB,QAcpB3I,EAAKC,aACRJ,OAAOC,SAAP,qBAAgCE,EAAKE,cAItCU,EAAa,CACZ0H,MAAO,GACPC,SAAU,KArBa,0DAAH,sDAyBtB,OACC,cAACrE,EAAA,EAAD,CAAS0B,OAAK,EAAd,SACC,cAAC9C,EAAA,EAAD,CAAMC,QAAS,EAAGsB,WAAS,EAA3B,SACC,eAACvB,EAAA,EAAKG,IAAN,WACC,cAACH,EAAA,EAAKI,OAAN,IACA,cAACJ,EAAA,EAAKI,OAAN,UACElD,EAAKC,WACL,eAAC,IAAD,CAAQ6F,GAAG,KAAKP,UAAU,SAA1B,UACC,gEACA,cAACqD,GAAA,EAAD,CAASC,YAAU,IACnB,cAAC,IAAD,CAAM7J,GAAE,qBAAgB2G,EAAK8C,MAAMhJ,KAAKC,KAAxC,SACC,eAACuI,GAAA,EAAD,CACC1G,OAAK,EACLyB,MAAO4E,GAAaC,WACpBiB,UAAQ,EACRtH,KAAK,OAJN,UAMC,cAACqC,EAAA,EAAD,CAAMlC,KAAK,iBANZ,+BAYF,cAACuC,EAAA,EAAD,CAASC,QAAM,EAAf,SACC,gCACC,cAAC2C,GAAA,EAAD,CACCiC,UAAQ,EACRC,OAAO,gBACPC,QAAQ,sDAET,eAAC9H,EAAA,EAAD,CACCpC,UAAU,yBACVqC,SAAUP,EAFX,UAIC,cAACM,EAAA,EAAKG,MAAN,CACC4H,MAAM,QACNxH,YAAY,QACZE,KAAK,QACLD,KAAK,QACLE,MAAOlB,EAAU2H,MACjBxG,SAAU4G,IAEX,cAACvH,EAAA,EAAKG,MAAN,CACC4H,MAAM,WACNxH,YAAY,WACZE,KAAK,WACLD,KAAK,WACLE,MAAOlB,EAAU4H,SACjBzG,SAAU4G,IAEX,cAACT,GAAA,EAAD,CACCjF,MAAO4E,GAAaC,WACpBjG,KAAK,SACLJ,KAAK,QAHN,sBAQD,eAACsF,GAAA,EAAD,CAASiC,SAAS,SAASI,SAAO,EAAlC,UACC,cAACtF,EAAA,EAAD,CAAMlC,KAAK,SADZ,gBAGC,cAAC,IAAD,CAAM3C,GAAG,UAAT,qBAHD,yBAUJ,cAAC8D,EAAA,EAAKI,OAAN,YCeUkG,GA1HA,WACd,MAAkC3I,mBAAS,CAC1Cd,SAAU,GACV2I,MAAO,GACPC,SAAU,KAHX,mBAAO5H,EAAP,KAAkBC,EAAlB,KAKA,EAA4B4H,aAAYN,IAAxC,mBAAOmB,EAAP,KAAkB1D,EAAlB,KAAkBA,KAGZ+C,EAAe,SAAC5H,GACrB,MAAwBA,EAAMiB,OAAtBJ,EAAR,EAAQA,KAAME,EAAd,EAAcA,MAEdjB,EAAa,2BACTD,GADQ,kBAEVgB,EAAOE,MAKJhB,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACxBD,EAAME,iBADkB,kBAIAqI,EAAQ,CAC9BhD,UAAU,eAAM1F,KALM,gBAIfgF,EAJe,EAIfA,KAIR3F,EAAKyI,MAAM9C,EAAK0D,SARO,gDAUvBpI,QAAQ0H,MAAR,MAVuB,QAcpB3I,EAAKC,aACRJ,OAAOC,SAAP,qBAAgCE,EAAKE,cAfd,yDAAH,sDAmBtB,OACC,eAACgE,EAAA,EAAD,CAAS0B,OAAK,EAAd,UACC,cAACgD,GAAA,EAAD,CAASC,YAAU,IACnB,cAAC/F,EAAA,EAAD,CAAMC,QAAS,EAAGsB,WAAS,EAA3B,SACC,eAACvB,EAAA,EAAKG,IAAN,WACC,cAACH,EAAA,EAAKI,OAAN,IACA,cAACJ,EAAA,EAAKI,OAAN,UACElD,EAAKC,WACL,eAAC,IAAD,CAAQ6F,GAAG,KAAKP,UAAU,SAA1B,UACC,gEACA,cAACqD,GAAA,EAAD,CAASC,YAAU,IACnB,cAAC,IAAD,CAAM7J,GAAE,qBAAgB2G,EAAK0D,QAAQ5J,KAAKC,KAA1C,SACC,eAACuI,GAAA,EAAD,CACC1G,OAAK,EACLyB,MAAO4E,GAAaC,WACpBiB,UAAQ,EACRtH,KAAK,OAJN,UAMC,cAACqC,EAAA,EAAD,CAAMlC,KAAK,iBANZ,+BAYF,cAACuC,EAAA,EAAD,CAASC,QAAM,EAAf,SACC,gCACC,cAAC2C,GAAA,EAAD,CACCiC,UAAQ,EACRC,OAAO,iBACPC,QAAQ,mDAET,eAAC9H,EAAA,EAAD,CACCpC,UAAU,yBACVqC,SAAUP,EAFX,UAIC,cAACM,EAAA,EAAKG,MAAN,CACC4H,MAAM,WACNxH,YAAY,WACZE,KAAK,OACLD,KAAK,WACLE,MAAOlB,EAAUhB,SACjBmC,SAAU4G,IAEX,cAACvH,EAAA,EAAKG,MAAN,CACC4H,MAAM,QACNxH,YAAY,QACZE,KAAK,QACLD,KAAK,QACLE,MAAOlB,EAAU2H,MACjBxG,SAAU4G,IAEX,cAACvH,EAAA,EAAKG,MAAN,CACC4H,MAAM,WACNxH,YAAY,WACZE,KAAK,WACLD,KAAK,WACLE,MAAOlB,EAAU4H,SACjBzG,SAAU4G,IAEX,cAACvH,EAAA,EAAKmI,SAAN,CACCC,QAAM,EACNL,MAAM,wCAEP,cAAC,GAAD,CACCnB,MAAM,OACNxE,MAAM,sBAGR,eAACuD,GAAA,EAAD,CAASiC,SAAS,SAASI,SAAO,EAAlC,UACC,cAACtF,EAAA,EAAD,CAAMlC,KAAK,SADZ,yBAGC,cAAC,IAAD,CAAM3C,GAAG,SAAT,wBAHD,yBAUJ,cAAC8D,EAAA,EAAKI,OAAN,aC1HUsG,GAVK,SAAC,GAAkB,IAC9B7J,EAD6B,EAAfL,SACdK,SACR,OACC,eAAC,IAAD,CAAQmG,GAAG,KAAX,UACC,cAACjC,EAAA,EAAD,CAAMlC,KAAK,iBADZ,iBAEgBhC,EAFhB,QC8Da8J,GAlDG,WACjB,IAAQC,EAAWtD,cAAXsD,OAEA/D,EAASF,aAASJ,GAAkB,CAC3CgB,UAAW,CAAExB,GAAI6E,KADV/D,KAIFlG,GAAW,OAAJkG,QAAI,IAAJA,OAAA,EAAAA,EAAMgE,WAAY,GAE/B,OACC,cAACzF,EAAA,EAAD,CAAS0B,OAAK,EAACC,OAAO,OAAtB,SACE7F,EAAKC,WACL,eAACiE,EAAA,EAAD,CAASC,QAAM,EAAC0B,OAAO,OAAvB,UACC,cAAC/C,EAAA,EAAD,CAAMC,QAAS,EAAGsB,WAAS,EAA3B,SACC,eAACvB,EAAA,EAAKG,IAAN,WACC,cAACH,EAAA,EAAKI,OAAN,UACC,cAAC,GAAD,CAAa5D,SAAUG,MAExB,cAACqD,EAAA,EAAKI,OAAN,UACC,cAAC,IAAD,CAAMlE,GAAE,qBAAgBS,EAAKC,IAArB,gBAAR,SACC,eAACuI,GAAA,EAAD,CACC1G,OAAK,EACLyB,MAAO4E,GAAaC,WACpBiB,UAAQ,EACRtH,KAAK,OAJN,UAMC,cAACqC,EAAA,EAAD,CAAMlC,KAAK,SANZ,8BAaJ,cAACiH,GAAA,EAAD,CAASC,YAAU,IAEnB,cAACD,GAAA,EAAD,CAASC,YAAU,IACnB,cAAC,IAAD,CAAQ/C,GAAG,KAAX,SACC,sBAAM/G,UAAU,cAAhB,kCAED,cAAC,EAAD,CAAUkF,SAAUW,OAGrB,cAAC,IAAD,CAAQW,UAAU,SAAS/D,KAAK,OAAhC,uCC+CWoI,GAlGQ,WACtB,MAAkCnJ,mBAAS,CAC1C8C,MAAO,GACP5D,SAAUK,EAAK6J,cACfpG,YAAa,GACbH,MAAO,GACPiD,YAAa,GACbC,OAAQ,GACRhD,UAAWgB,MAPZ,mBAAO7D,EAAP,KAAkBC,EAAlB,KAUA,EAAwB4H,aAAYL,IAA7B2B,EAAP,oBAEMpB,EAAe,SAAC5H,GACrB,MAAwBA,EAAMiB,OAAtBJ,EAAR,EAAQA,KAAME,EAAd,EAAcA,MAEdjB,EAAa,2BACTD,GADQ,kBAEVgB,EAAOE,MAIJhB,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACxBD,EAAME,iBADkB,kBAGA8I,EAAc,CACpCzD,UAAU,eAAM1F,KAJM,gBAGfgF,EAHe,EAGfA,KAGR9F,OAAOC,SAAP,gBAA2B6F,EAAKoE,WAAWrK,KANpB,gDAQvBuB,QAAQ0H,MAAR,MARuB,yDAAH,sDAYtB,OACC,gCACC,cAAC7B,GAAA,EAAD,UACC,cAAC,IAAD,CAAQhB,GAAG,KAAX,iCAED,eAAC3E,EAAA,EAAD,CAAMpC,UAAU,yBAAyBqC,SAAUP,EAAnD,UACC,cAACM,EAAA,EAAKG,MAAN,CACC4H,MAAM,aACNxH,YAAY,eACZE,KAAK,OACLC,MAAOlB,EAAU4C,MACjBzB,SAAU4G,EACV/G,KAAK,UAEN,cAACR,EAAA,EAAKG,MAAN,CACC4H,MAAM,cACNxH,YAAY,cACZE,KAAK,OACLC,MAAOlB,EAAU8C,YACjB3B,SAAU4G,EACV/G,KAAK,gBAEN,cAACR,EAAA,EAAKG,MAAN,CACC4H,MAAM,YACNxH,YAAY,6BACZE,KAAK,OACLC,MAAOlB,EAAU2C,MACjBxB,SAAU4G,EACV/G,KAAK,UAEN,cAACR,EAAA,EAAKG,MAAN,CACC4H,MAAM,YACNxH,YAAY,YACZE,KAAK,OACLC,MAAOlB,EAAU6C,UACjB1B,SAAU4G,EACV/G,KAAK,cAEN,cAACR,EAAA,EAAK6I,SAAN,CACCd,MAAM,mBACNxH,YAAY,sCACZuI,KAAM,EACNpI,MAAOlB,EAAU4F,YACjBzE,SAAU4G,EACV/G,KAAK,gBAEN,cAACR,EAAA,EAAK6I,SAAN,CACCd,MAAM,iBACNxH,YAAY,0CACZuI,KAAM,EACNpI,MAAOlB,EAAU6F,OACjB1E,SAAU4G,EACV/G,KAAK,WAEN,cAAC,GAAD,CAAY4B,MAAM,mBAEnB,eAACuD,GAAA,EAAD,CAASiC,SAAS,SAASmB,MAAI,EAA/B,UACC,cAACrG,EAAA,EAAD,CAAMlC,KAAK,aADZ,+EC3DYwI,GAhCI,WAClB,OACC,cAACjG,EAAA,EAAD,CAAS0B,OAAK,EAACC,OAAO,OAAtB,SACC,cAAC3B,EAAA,EAAD,CAASC,QAAM,EAAC0B,OAAO,OAAvB,SACC,eAAC/C,EAAA,EAAD,CAAMC,QAAS,EAAGsB,WAAS,EAA3B,UACC,eAACvB,EAAA,EAAKG,IAAN,WACC,cAACH,EAAA,EAAKI,OAAN,UACC,cAAC,GAAD,CACC5D,SAAU,CAAEK,SAAUK,EAAK6J,mBAG7B,cAAC/G,EAAA,EAAKI,OAAN,CAAaqC,UAAU,QAAvB,SACC,cAAC,IAAD,CAAMvG,GAAE,qBAAgBgB,EAAKE,aAA7B,SACC,eAAC+H,GAAA,EAAD,CAAQzG,KAAK,QAAQwB,MAAO4E,GAAaC,WAAzC,UACC,cAAChE,EAAA,EAAD,CAAMlC,KAAK,sBADZ,+BAOH,eAACmB,EAAA,EAAKG,IAAN,WACC,cAACH,EAAA,EAAKI,OAAN,UACC,cAAC,GAAD,MAED,cAACJ,EAAA,EAAKI,OAAN,e,8BClBAkH,GAAS,IAAIC,KAAa,CAC/BC,IAAK,WACLC,MAAO,IAAIC,OA0CGC,GAvCH,WACX,OACC,cAACC,GAAA,EAAD,CAAgBN,OAAQA,GAAxB,SACC,eAAC,IAAD,WAEC,cAAC,EAAD,IAGA,iCACC,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAlB,SACC,cAAC,GAAD,MAED,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YAAlB,SACC,cAAC,GAAD,MAED,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,iBAAlB,SACC,cAAC,GAAD,MAED,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAAlB,SACC,cAAC,GAAD,MAED,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAAlB,SACC,cAAC,GAAD,MAED,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,qBAAlB,SACC,cAAC,GAAD,MAED,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,iCAAlB,SACC,cAAC,GAAD,SAKF,cAAC,EAAD,UCvCWC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,GAAD,MAEDC,SAASC,eAAe,SAMzBb,O","file":"static/js/main.7a07b9c9.chunk.js","sourcesContent":["import \"./header.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Logo = () => {\n\treturn (\n\t\t<div className=\"logo\">\n\t\t\t<Link to=\"/\">\n\t\t\t\t<h1>\n\t\t\t\t\t<i className=\"utensils icon\"></i> algo\n\t\t\t\t\t<span className=\"dish\">Dish</span>\n\t\t\t\t</h1>\n\t\t\t</Link>\n\t\t</div>\n\t);\n};\n\nexport default Logo;\n","// use this to decode a token and get the user's information out of it\nimport decode from \"jwt-decode\";\n\n// create a new class to instantiate for a user\nclass AuthService {\n\t// get user data from JSON web token by decoding it\n\tgetProfile() {\n\t\treturn decode(this.getToken());\n\t}\n\n\t// return `true` or `false` if token exists (does not verify if it's expired yet)\n\tloggedIn() {\n\t\tconst token = this.getToken();\n\t\treturn token ? true : false;\n\t}\n\n\tgetToken() {\n\t\t// Retrieves the user token from localStorage\n\t\treturn localStorage.getItem(\"id_token\");\n\t}\n\n\tgetUserId() {\n\t\t// Retrieves the user id from localStorage\n\t\treturn localStorage.getItem(\"user_id\");\n\t}\n\n\tgetUsername() {\n\t\t// Retrieves the user username from localStorage\n\t\treturn localStorage.getItem(\"user_username\");\n\t}\n\n\tlogin(userData) {\n\t\t// Saves user token to localStorage and reloads the application for logged in status to take effect\n\t\tlocalStorage.setItem(\"id_token\", userData.token);\n\t\tlocalStorage.setItem(\"user_id\", userData.user._id);\n\t\tlocalStorage.setItem(\"user_username\", userData.user.username);\n\t\t// window.location.assign(\"/\");\n\t}\n\n\tlogout() {\n\t\t// Clear user token and profile data from localStorage\n\t\tlocalStorage.removeItem(\"id_token\");\n\t\tlocalStorage.removeItem(\"user_id\");\n\t\tlocalStorage.removeItem(\"user_username\");\n\t\t// this will redirect user to homepage and reset the state of the application\n\t\twindow.location = \"/\";\n\t}\n}\n\nexport default new AuthService();\n","import \"./header.css\";\nimport { Link } from \"react-router-dom\";\nimport Auth from \"../../utils/auth\";\n\nconst Navbar = () => {\n\treturn (\n\t\t<nav>\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\t<Link to=\"/\">Home</Link>\n\t\t\t\t</li>\n\t\t\t\t{Auth.loggedIn() ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to={`/dashboard/${Auth.getUserId()}`}>Dashboard</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"#\" onClick={Auth.logout}>\n\t\t\t\t\t\t\t\tLogout\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/login\">Login</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/signup\">Signup</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t<li>\n\t\t\t\t\t<Link to=\"/about\">About</Link>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</nav>\n\t);\n};\n\nexport default Navbar;\n","import \"./header.css\";\nimport Logo from \"./logo\";\nimport Navbar from \"./navbar\";\n\nconst Header = () => {\n\treturn (\n\t\t<header>\n\t\t\t<Logo></Logo>\n\t\t\t<Navbar></Navbar>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","// import Footer from \"./index\";\n\nconst FooterCopyright = () => {\n  return <p className=\"test\">© 2021 AlgoDish. All Rights Reserved.</p>;\n};\n\nexport default FooterCopyright;\n","import \"./footer.css\";\nimport FooterCopyright from \"./footerCopyright\";\n\nconst Footer = () => {\n\treturn (\n\t\t<footer>\n\t\t\t<FooterCopyright></FooterCopyright>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/salmon-bg.87ff32fb.jpg\";","import { useState } from \"react\";\nimport { Form } from \"semantic-ui-react\";\n\nconst SearchBar = () => {\n\tconst [formState, setFormState] = useState({\n\t\tsearch: \"\",\n\t});\n\n\tconst handleChange = (event) => {\n\t\tconst { name, value } = event.target;\n\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\t[name]: value,\n\t\t});\n\t};\n\n\tconst handleFormSubmit = async (event) => {\n\t\tevent.preventDefault();\n\t\tconsole.log(formState);\n\n\t\t// Redirect user to search page\n\t\twindow.location = `/search/${formState.search}`;\n\t};\n\treturn (\n\t\t<Form onSubmit={handleFormSubmit} autoComplete=\"off\">\n\t\t\t<Form.Input\n\t\t\t\tfluid\n\t\t\t\tsize=\"massive\"\n\t\t\t\ticon=\"search\"\n\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\tname=\"search\"\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={formState.search}\n\t\t\t\tonChange={handleChange}\n\t\t\t/>\n\t\t</Form>\n\t);\n};\nexport default SearchBar;\n","import mealImage from \"../../assets/images/salmon-bg.jpg\";\nimport SearchBar from \"../SearchBar\";\nimport { Grid } from \"semantic-ui-react\";\n\nconst Banner = () => {\n\tconst customStyle = {\n\t\twallpaper: {\n\t\t\twidth: \"100%\",\n\t\t\tminHeight: \"300px\",\n\t\t\tbackgroundImage: `url(${mealImage})`,\n\t\t\tbackgroundPosition: \"center\",\n\t\t\tbackgroundRepeat: \"no-repeat\",\n\t\t\tbackgroundSize: \"cover\",\n\t\t\tdisplay: \"flex\",\n\t\t\tjustifyContent: \"center\",\n\t\t\talignItems: \"center\",\n\t\t},\n\t\tsearch: {\n\t\t\tminWidth: \"60%\",\n\t\t},\n\t};\n\treturn (\n\t\t<Grid columns={1}>\n\t\t\t<div style={customStyle.wallpaper}>\n\t\t\t\t<Grid.Row style={customStyle.search}>\n\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t<SearchBar></SearchBar>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t</Grid.Row>\n\t\t\t</div>\n\t\t</Grid>\n\t);\n};\nexport default Banner;\n","import { Card, Icon } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport \"./dishCard.css\";\n\nconst DishCard = ({ dish }) => {\n\tconst { _id: dishId, image, title, username, cook_time, description } = dish;\n\n\treturn (\n\t\t<Card fluid>\n\t\t\t<Link to={`/dish/${dishId}`}>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"dishImage\"\n\t\t\t\t\tstyle={{ backgroundImage: `url(${image})` }}\n\t\t\t\t></div>\n\t\t\t</Link>\n\t\t\t<Card.Content>\n\t\t\t\t<Card.Header>{title}</Card.Header>\n\t\t\t\t<br />\n\t\t\t\t<Card.Meta>\n\t\t\t\t\t<Icon name=\"user outline\"></Icon>\n\t\t\t\t\t<span className=\"date\">{username}</span>\n\t\t\t\t</Card.Meta>\n\t\t\t\t<br />\n\t\t\t\t<Card.Meta>\n\t\t\t\t\t<Card.Description>\n\t\t\t\t\t\t<div className=\"add-ellipsis\">\n\t\t\t\t\t\t\t<Icon name=\"list alternate outline\"></Icon> {description}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Card.Description>\n\t\t\t\t</Card.Meta>\n\t\t\t</Card.Content>\n\t\t\t<Card.Content extra>\n\t\t\t\t<span>\n\t\t\t\t\t<Icon name=\"clock outline\" /> Cook time {cook_time} mins\n\t\t\t\t</span>\n\t\t\t</Card.Content>\n\t\t</Card>\n\t);\n};\n\nexport default DishCard;\n","import { Grid, Segment } from \"semantic-ui-react\";\nimport DishCard from \"../DishCard\";\n\nconst Carousel = ({ dishList }) => (\n\t<Segment placeholder raised>\n\t\t<Grid doubling stackable columns={4}>\n\t\t\t<Grid.Row>\n\t\t\t\t{dishList.map((dish, index) => (\n\t\t\t\t\t<Grid.Column key={index}>\n\t\t\t\t\t\t<DishCard dish={dish}></DishCard>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t))}\n\t\t\t</Grid.Row>\n\t\t</Grid>\n\t</Segment>\n);\n\nexport default Carousel;\n","export default __webpack_public_path__ + \"static/media/spagetti.3b892b6c.jpg\";","import spagettiImg from \"../../assets/images/spagetti.jpg\";\n\nexport const generateRandomId = () => Math.floor(Math.random() * 99);\nconst TestDishes = () => [\n\t{\n\t\tid: generateRandomId(),\n\t\timage: spagettiImg,\n\t\ttitle: `Delicious spagetti ${generateRandomId()}`,\n\t\tusername: \"Elle\",\n\t\tcookTime: generateRandomId(),\n\t\tdescription: \"Spagetti cooked in the Zimbabwe style!\",\n\t},\n\t{\n\t\tid: generateRandomId(),\n\t\timage: spagettiImg,\n\t\ttitle: `Delicious spagetti ${generateRandomId()}`,\n\t\tusername: \"Elle\",\n\t\tcookTime: generateRandomId(),\n\t\tdescription: \"Spagetti cooked in the Zimbabwe style!\",\n\t},\n\t{\n\t\tid: generateRandomId(),\n\t\timage: spagettiImg,\n\t\ttitle: `Delicious spagetti ${generateRandomId()}`,\n\t\tusername: \"Elle\",\n\t\tcookTime: generateRandomId(),\n\t\tdescription: \"Spagetti cooked in the Zimbabwe style!\",\n\t},\n\t{\n\t\tid: generateRandomId(),\n\t\timage: spagettiImg,\n\t\ttitle: `Delicious spagetti ${generateRandomId()}`,\n\t\tusername: \"Elle\",\n\t\tcookTime: generateRandomId(),\n\t\tdescription: \"Spagetti cooked in the Zimbabwe style!\",\n\t},\n];\n\nexport default TestDishes();\n","import { gql } from \"@apollo/client\";\n\n//Get all dishes from the database\nexport const FETCH_ALL_DISHES = gql`\n  query allDishes {\n    allDishes {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n    }\n  }\n`;\n\n//Why is this suddenly not working\nexport const FETCH_DISH_BY_ID = gql`\n  query dishById($id: ID!) {\n    dishById(id: $id) {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n    }\n  }\n`;\n\n//Get One Master Dish\nexport const FETCH_WHOLE_DISH_BY_ID = gql`\n  query dishById($id: ID!) {\n    dishById(id: $id) {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n      ingredients\n      recipe\n    }\n  }\n`;\n\n//Get all dishes by user ID (created_dishes)\nexport const FETCH_CREATED_DISHES = gql`\n  query userDishes($id: ID!) {\n    userDishes(id: $id) {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n      ingredients\n    }\n  }\n`;\n\n//five random dishes\nexport const FETCH_FOUR_RANDOM_DISHES = gql`\n  query fourRandomDishes {\n    fourRandomDishes {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n    }\n  }\n`;\n\n//last five dishes\nexport const FETCH_LAST_FOUR_DISHES = gql`\n  query lastFourDishes {\n    lastFourDishes {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n    }\n  }\n`;\n\n//Get dishes by name\nexport const FETCH_DISH_BY_NAME = gql`\n  query dishesByName($title: String!) {\n    dishesByName(title: $title) {\n      _id\n      title\n      username\n      image\n      description\n      cook_time\n    }\n  }\n`;\n\n//Get all users\nexport const FETCH_USERS = gql`\n  query users {\n    users {\n      _id\n      username\n    }\n  }\n`;\n\n//Get user by ID\nexport const FETCH_USER_BY_ID = gql`\n  query userById($id: ID!) {\n    userById(id: $id) {\n      _id\n      username\n      email\n    }\n  }\n`;\n","import { Segment, Header, Icon } from \"semantic-ui-react\";\n\nconst Loading = () => {\n\treturn (\n\t\t<Segment placeholder raised textAlign=\"center\">\n\t\t\t<Header textAlign=\"center\" size=\"large\">\n\t\t\t\t<Icon name=\"spinner\"></Icon>\n\t\t\t</Header>\n\t\t</Segment>\n\t);\n};\n\nexport default Loading;\n","import { Header, Segment } from \"semantic-ui-react\";\nimport Carousel from \"../Carousel\";\nimport TestDishes from \"../TestDishes\";\nimport { FETCH_LAST_FOUR_DISHES } from \"../../utils/queries\";\nimport { useQuery } from \"@apollo/client\";\nimport Loading from \"../Loading\";\n\nconst RecentDishes = () => {\n\tconst { loading, data } = useQuery(FETCH_LAST_FOUR_DISHES);\n\tconst dishList = () => data?.lastFourDishes || TestDishes;\n\treturn (\n\t\t<Segment basic padded=\"very\">\n\t\t\t{loading ? (\n\t\t\t\t<Loading></Loading>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<Header as=\"h2\">\n\t\t\t\t\t\t<span className=\"cadet-color\">Recently added dishes</span>\n\t\t\t\t\t</Header>\n\t\t\t\t\t<Carousel dishList={dishList()}></Carousel>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Segment>\n\t);\n};\n\nexport default RecentDishes;\n","import { Header, Segment } from \"semantic-ui-react\";\nimport Carousel from \"../Carousel\";\nimport TestDishes from \"../TestDishes\";\nimport { FETCH_FOUR_RANDOM_DISHES } from \"../../utils/queries\";\nimport { useQuery } from \"@apollo/client\";\nimport Loading from \"../Loading\";\n\nconst PopularDishes = () => {\n\tconst { loading, data } = useQuery(FETCH_FOUR_RANDOM_DISHES);\n\tconst dishList = () => data?.fourRandomDishes || TestDishes;\n\treturn (\n\t\t<Segment basic padded=\"very\">\n\t\t\t{loading ? (\n\t\t\t\t<Loading></Loading>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<Header as=\"h2\">\n\t\t\t\t\t\t<span className=\"cadet-color\">Most popular dishes</span>\n\t\t\t\t\t</Header>\n\t\t\t\t\t<Carousel dishList={dishList()}></Carousel>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Segment>\n\t);\n};\n\nexport default PopularDishes;\n","import { Segment } from \"semantic-ui-react\";\nimport Banner from \"../components/Banner\";\nimport RecentDishes from \"../components/RecentDishes\";\nimport PopularDishes from \"../components/PopularDishes\";\n\nconst Home = () => {\n\treturn (\n\t\t<>\n\t\t\t<Segment basic>\n\t\t\t\t<Banner></Banner>\n\t\t\t</Segment>\n\t\t\t<RecentDishes></RecentDishes>\n\t\t\t<PopularDishes></PopularDishes>\n\t\t</>\n\t);\n};\n\nexport default Home;\n","import { Header, Icon, Segment, Message, List } from \"semantic-ui-react\";\nimport { FETCH_WHOLE_DISH_BY_ID } from \"../utils/queries\";\nimport { useQuery } from \"@apollo/client\";\nimport { useParams } from \"react-router\";\nimport Loading from \"../components/Loading\";\n\nconst Dish = () => {\n\tconst dishStyles = {\n\t\tdishBackground: {\n\t\t\twidth: \"100%\",\n\t\t\theight: \"200px\",\n\t\t\tbackgroundPosition: \"center\",\n\t\t\tbackgroundRepeat: \"no-repeat\",\n\t\t\tbackgroundSize: \"cover\",\n\t\t\tborderRadius: \"10px\",\n\t\t},\n\t};\n\n\tconst { id: dishId } = useParams();\n\tconst { loading, data } = useQuery(FETCH_WHOLE_DISH_BY_ID, {\n\t\tvariables: { id: dishId },\n\t});\n\n\tconst {\n\t\ttitle,\n\t\timage,\n\t\tusername,\n\t\tdescription,\n\t\tingredients,\n\t\trecipe,\n\t\tcook_time,\n\t} = data?.dishById || {};\n\n\tconst ingredientsList = ingredients ? ingredients.split(\",\") : [];\n\tconst recipeList = recipe ? recipe.split(\".\") : [];\n\n\treturn (\n\t\t<Segment basic padded=\"very\">\n\t\t\t{loading ? (\n\t\t\t\t<Loading></Loading>\n\t\t\t) : (\n\t\t\t\t<Segment raised padded=\"very\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tbackgroundImage: `url(${image})`,\n\t\t\t\t\t\t\t...dishStyles.dishBackground,\n\t\t\t\t\t\t}}\n\t\t\t\t\t></div>\n\t\t\t\t\t<Header as=\"h3\" size=\"huge\">\n\t\t\t\t\t\t<Icon name=\"utensils\"></Icon> {title}\n\t\t\t\t\t</Header>\n\t\t\t\t\t<Message>\n\t\t\t\t\t\t<Message.Header>\n\t\t\t\t\t\t\t<Icon name=\"user outline\"></Icon> {username} says:\n\t\t\t\t\t\t</Message.Header>\n\t\t\t\t\t\t<p>{description}</p>\n\t\t\t\t\t</Message>\n\t\t\t\t\t<Message>\n\t\t\t\t\t\t<Message.Header>Ingredients</Message.Header>\n\t\t\t\t\t\t<Segment>\n\t\t\t\t\t\t\t{ingredientsList.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t<List key={index} divided inverted relaxed>\n\t\t\t\t\t\t\t\t\t<List.Item>\n\t\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t\t{index + 1}. {ingredient}\n\t\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Segment>\n\t\t\t\t\t</Message>\n\t\t\t\t\t<Message>\n\t\t\t\t\t\t<Message.Header>Recipe</Message.Header>\n\t\t\t\t\t\t<Segment>\n\t\t\t\t\t\t\t{recipeList\n\t\t\t\t\t\t\t\t.slice(0, recipeList.length - 1)\n\t\t\t\t\t\t\t\t.map((recipe, index) => (\n\t\t\t\t\t\t\t\t\t<List key={index} divided inverted relaxed>\n\t\t\t\t\t\t\t\t\t\t<List.Item>\n\t\t\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t{index + 1}. {recipe}\n\t\t\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Segment>\n\t\t\t\t\t</Message>\n\t\t\t\t\t<Message>\n\t\t\t\t\t\t<Message.Header>Cook Time</Message.Header>\n\t\t\t\t\t\t<Segment>\n\t\t\t\t\t\t\t<List divided inverted relaxed>\n\t\t\t\t\t\t\t\t<List.Item>\n\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\tEstimated ready time is {cook_time} minutes!\n\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t</Segment>\n\t\t\t\t\t</Message>\n\t\t\t\t</Segment>\n\t\t\t)}\n\t\t</Segment>\n\t);\n};\n\nexport default Dish;\n","import { Grid, Icon, Message, Segment } from \"semantic-ui-react\";\nimport { FETCH_DISH_BY_NAME } from \"../utils/queries\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport Loading from \"../components/Loading\";\nimport DishCard from \"../components/DishCard\";\n\nconst Search = () => {\n\tconst { query: dishTitle } = useParams();\n\tconst { loading, data } = useQuery(FETCH_DISH_BY_NAME, {\n\t\tvariables: { title: dishTitle },\n\t});\n\tconst results = data?.dishesByName || [];\n\tconsole.log(\"Search results: \", results);\n\treturn (\n\t\t<Segment basic padded=\"very\">\n\t\t\t{loading ? (\n\t\t\t\t<Loading></Loading>\n\t\t\t) : (\n\t\t\t\t<Segment raised padded=\"very\">\n\t\t\t\t\t<Message>\n\t\t\t\t\t\t<Message.Header>\n\t\t\t\t\t\t\t<Icon name=\"search\"></Icon>\n\t\t\t\t\t\t\t{results.length} results found for: {dishTitle}\n\t\t\t\t\t\t</Message.Header>\n\t\t\t\t\t</Message>\n\t\t\t\t\t<Grid doubling stackable columns={results.length}>\n\t\t\t\t\t\t<Grid.Row>\n\t\t\t\t\t\t\t{results.map((dish, index) => (\n\t\t\t\t\t\t\t\t<Grid.Column key={index}>\n\t\t\t\t\t\t\t\t\t<DishCard dish={dish}></DishCard>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Grid.Row>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Segment>\n\t\t\t)}\n\t\t</Segment>\n\t);\n};\n\nexport default Search;\n","import { Button } from \"semantic-ui-react\";\n\nexport const buttonStyles = {\n\talgoButton: {\n\t\tbackgroundColor: \"#1a1b41\",\n\t\tcolor: \"#ffffff\",\n\t},\n};\n\nconst MainButton = ({ title }) => {\n\treturn (\n\t\t<Button type=\"submit\" size=\"large\" style={buttonStyles.algoButton}>\n\t\t\t{title}\n\t\t</Button>\n\t);\n};\nexport default MainButton;\n","import { gql } from \"@apollo/client\";\n\n//Create A User\nexport const CREATE_NEW_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        username\n        _id\n      }\n    }\n  }\n`;\n\n//Create A Dish\n\n// to break this down: for a dish, we are taking in from the user a title (string) and an image (string). Then, we take in ingredients which is an array of strings. THEN, we take in instructions which is an array of objects that take in steps which itself is an array of objects, each containing time (Int) and a step (string)\n//I'm not sure the notation to add the username as the dishAuthor\n\nexport const CREATE_NEW_DISH = gql`\n  mutation uploadDish($title: String!, $username: String!, $description: String!, $image: String, $ingredients: String!, $recipe: String!, $cook_time: Int) {\n    uploadDish(title: $title, username: $username, description: $description, image: $image, ingredients: $ingredients, recipe: $recipe, cook_time: $cook_time) {\n      _id\n    }\n  }\n`;\n\n//Delete A Dish by dish _id\n// export const DELETE_DISH = gql``;\n\n//Login\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import { useState } from \"react\";\nimport {\n\tSegment,\n\tForm,\n\tGrid,\n\tMessage,\n\tIcon,\n\tDivider,\n\tHeader,\n\tButton,\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { buttonStyles } from \"../components/MainButton\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nconst Login = () => {\n\tconst [formState, setFormState] = useState({ email: \"\", password: \"\" });\n\tconst [login, { data }] = useMutation(LOGIN);\n\n\t// update state based on form input changes\n\tconst handleChange = (event) => {\n\t\tconst { name, value } = event.target;\n\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\t[name]: value,\n\t\t});\n\t};\n\n\t// submit form\n\tconst handleFormSubmit = async (event) => {\n\t\tevent.preventDefault();\n\t\tconsole.log(formState);\n\t\ttry {\n\t\t\tconst { data } = await login({\n\t\t\t\tvariables: { ...formState },\n\t\t\t});\n\n\t\t\tAuth.login(data.login);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\n\t\t// redirect user to dashboard\n\t\tif (Auth.loggedIn()) {\n\t\t\twindow.location = `/dashboard/${Auth.getUserId()}`;\n\t\t}\n\n\t\t// clear form values\n\t\tsetFormState({\n\t\t\temail: \"\",\n\t\t\tpassword: \"\",\n\t\t});\n\t};\n\n\treturn (\n\t\t<Segment basic>\n\t\t\t<Grid columns={3} stackable>\n\t\t\t\t<Grid.Row>\n\t\t\t\t\t<Grid.Column></Grid.Column>\n\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t{Auth.loggedIn() ? (\n\t\t\t\t\t\t\t<Header as=\"h3\" textAlign=\"center\">\n\t\t\t\t\t\t\t\t<p>Success! You are now logged in!</p>\n\t\t\t\t\t\t\t\t<Divider horizontal></Divider>\n\t\t\t\t\t\t\t\t<Link to={`/dashboard/${data.login.user._id}`}>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tfluid\n\t\t\t\t\t\t\t\t\t\tstyle={buttonStyles.algoButton}\n\t\t\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\t\t\tsize=\"huge\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Icon name=\"user outline\"></Icon>\n\t\t\t\t\t\t\t\t\t\tProceed to dashboard\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</Header>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Segment raised>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<Message\n\t\t\t\t\t\t\t\t\t\tattached\n\t\t\t\t\t\t\t\t\t\theader=\"Account Login\"\n\t\t\t\t\t\t\t\t\t\tcontent=\"Enter your credentials to login into your account\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Form\n\t\t\t\t\t\t\t\t\t\tclassName=\"attached fluid segment\"\n\t\t\t\t\t\t\t\t\t\tonSubmit={handleFormSubmit}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Form.Input\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"email\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={formState.email}\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Form.Input\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"********\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={formState.password}\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tstyle={buttonStyles.algoButton}\n\t\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tLogin\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t\t\t<Message attached=\"bottom\" warning>\n\t\t\t\t\t\t\t\t\t\t<Icon name=\"user\" />\n\t\t\t\t\t\t\t\t\t\tNew user?&nbsp;\n\t\t\t\t\t\t\t\t\t\t<Link to=\"/signup\">Sign up</Link>\n\t\t\t\t\t\t\t\t\t\t&nbsp;instead.\n\t\t\t\t\t\t\t\t\t</Message>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Segment>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t<Grid.Column></Grid.Column>\n\t\t\t\t</Grid.Row>\n\t\t\t</Grid>\n\t\t</Segment>\n\t);\n};\nexport default Login;\n","import { useState } from \"react\";\nimport {\n\tSegment,\n\tForm,\n\tGrid,\n\tMessage,\n\tIcon,\n\tDivider,\n\tHeader,\n\tButton,\n} from \"semantic-ui-react\";\nimport { buttonStyles } from \"../components/MainButton\";\nimport { Link } from \"react-router-dom\";\nimport MainButton from \"../components/MainButton\";\nimport { useMutation } from \"@apollo/client\";\nimport { CREATE_NEW_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nconst Signup = () => {\n\tconst [formState, setFormState] = useState({\n\t\tusername: \"\",\n\t\temail: \"\",\n\t\tpassword: \"\",\n\t});\n\tconst [addUser, { data }] = useMutation(CREATE_NEW_USER);\n\n\t// update state based on form input changes\n\tconst handleChange = (event) => {\n\t\tconst { name, value } = event.target;\n\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\t[name]: value,\n\t\t});\n\t};\n\n\t// submit form\n\tconst handleFormSubmit = async (event) => {\n\t\tevent.preventDefault();\n\n\t\ttry {\n\t\t\tconst { data } = await addUser({\n\t\t\t\tvariables: { ...formState },\n\t\t\t});\n\n\t\t\tAuth.login(data.addUser);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\n\t\t// redirect user to dashboard\n\t\tif (Auth.loggedIn()) {\n\t\t\twindow.location = `/dashboard/${Auth.getUserId()}`;\n\t\t}\n\t};\n\n\treturn (\n\t\t<Segment basic>\n\t\t\t<Divider horizontal></Divider>\n\t\t\t<Grid columns={3} stackable>\n\t\t\t\t<Grid.Row>\n\t\t\t\t\t<Grid.Column></Grid.Column>\n\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t{Auth.loggedIn() ? (\n\t\t\t\t\t\t\t<Header as=\"h3\" textAlign=\"center\">\n\t\t\t\t\t\t\t\t<p>Success! You are now signed up!</p>\n\t\t\t\t\t\t\t\t<Divider horizontal></Divider>\n\t\t\t\t\t\t\t\t<Link to={`/dashboard/${data.addUser.user._id}`}>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tfluid\n\t\t\t\t\t\t\t\t\t\tstyle={buttonStyles.algoButton}\n\t\t\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\t\t\tsize=\"huge\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Icon name=\"user outline\"></Icon>\n\t\t\t\t\t\t\t\t\t\tProceed to dashboard\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</Header>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Segment raised>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<Message\n\t\t\t\t\t\t\t\t\t\tattached\n\t\t\t\t\t\t\t\t\t\theader=\"Create Account\"\n\t\t\t\t\t\t\t\t\t\tcontent=\"Fill out the form below to create your account\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Form\n\t\t\t\t\t\t\t\t\t\tclassName=\"attached fluid segment\"\n\t\t\t\t\t\t\t\t\t\tonSubmit={handleFormSubmit}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Form.Input\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"Username\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Username\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={formState.username}\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Form.Input\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"email\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={formState.email}\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Form.Input\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"password\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={formState.password}\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Form.Checkbox\n\t\t\t\t\t\t\t\t\t\t\tinline\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"I agree to the terms and conditions\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<MainButton\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"blue\"\n\t\t\t\t\t\t\t\t\t\t\ttitle=\"Create Account\"\n\t\t\t\t\t\t\t\t\t\t></MainButton>\n\t\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t\t\t<Message attached=\"bottom\" warning>\n\t\t\t\t\t\t\t\t\t\t<Icon name=\"user\" />\n\t\t\t\t\t\t\t\t\t\tAlready signed up?&nbsp;\n\t\t\t\t\t\t\t\t\t\t<Link to=\"/login\">Login here</Link>\n\t\t\t\t\t\t\t\t\t\t&nbsp;instead.\n\t\t\t\t\t\t\t\t\t</Message>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Segment>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t<Grid.Column></Grid.Column>\n\t\t\t\t</Grid.Row>\n\t\t\t</Grid>\n\t\t</Segment>\n\t);\n};\nexport default Signup;\n","import { Header, Icon } from \"semantic-ui-react\";\n\nconst UserAccount = ({ userData }) => {\n\tconst { username } = userData;\n\treturn (\n\t\t<Header as=\"h2\">\n\t\t\t<Icon name=\"user outline\"></Icon>\n\t\t\tWelcome back, {username}!\n\t\t</Header>\n\t);\n};\n\nexport default UserAccount;\n","import {\n\tSegment,\n\tHeader,\n\tGrid,\n\tButton,\n\tIcon,\n\tDivider,\n} from \"semantic-ui-react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { buttonStyles } from \"../../components/MainButton\";\nimport Carousel from \"../../components/Carousel\";\nimport TestDishes from \"../../components/TestDishes\";\nimport UserAccount from \"../../components/UserAccount\";\nimport Auth from \"../../utils/auth\";\nimport { useQuery } from \"@apollo/client\";\nimport { FETCH_USER_BY_ID } from \"../../utils/queries\";\n\nconst Dashboard = () => {\n\tconst { userId } = useParams();\n\n\tconst { data } = useQuery(FETCH_USER_BY_ID, {\n\t\tvariables: { id: userId },\n\t});\n\n\tconst user = data?.userById || {};\n\n\treturn (\n\t\t<Segment basic padded=\"very\">\n\t\t\t{Auth.loggedIn() ? (\n\t\t\t\t<Segment raised padded=\"very\">\n\t\t\t\t\t<Grid columns={2} stackable>\n\t\t\t\t\t\t<Grid.Row>\n\t\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t\t<UserAccount userData={user}></UserAccount>\n\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t\t<Link to={`/dashboard/${user._id}/create-dish`}>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tfluid\n\t\t\t\t\t\t\t\t\t\tstyle={buttonStyles.algoButton}\n\t\t\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\t\t\tsize=\"huge\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Icon name=\"plus\"></Icon>\n\t\t\t\t\t\t\t\t\t\tCreate new dish\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t</Grid.Row>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Divider horizontal></Divider>\n\n\t\t\t\t\t<Divider horizontal></Divider>\n\t\t\t\t\t<Header as=\"h2\">\n\t\t\t\t\t\t<span className=\"cadet-color\">Dishes you created</span>\n\t\t\t\t\t</Header>\n\t\t\t\t\t<Carousel dishList={TestDishes}></Carousel>\n\t\t\t\t</Segment>\n\t\t\t) : (\n\t\t\t\t<Header textAlign=\"center\" size=\"huge\">\n\t\t\t\t\tYou must be logged in!\n\t\t\t\t</Header>\n\t\t\t)}\n\t\t</Segment>\n\t);\n};\n\nexport default Dashboard;\n","import { Message, Form, Icon, Header } from \"semantic-ui-react\";\nimport MainButton from \"../MainButton\";\nimport { useMutation } from \"@apollo/client\";\nimport { CREATE_NEW_DISH } from \"../../utils/mutations\";\nimport React, { useState } from \"react\";\nimport { generateRandomId } from \"../TestDishes/index\";\nimport Auth from \"../../utils/auth\";\n\nconst CreateDishForm = () => {\n\tconst [formState, setFormState] = useState({\n\t\ttitle: \"\",\n\t\tusername: Auth.getUsername(),\n\t\tdescription: \"\",\n\t\timage: \"\",\n\t\tingredients: \"\",\n\t\trecipe: \"\",\n\t\tcook_time: generateRandomId(), //parseInt('233')\n\t});\n\n\tconst [createNewDish] = useMutation(CREATE_NEW_DISH);\n\n\tconst handleChange = (event) => {\n\t\tconst { name, value } = event.target;\n\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\t[name]: value,\n\t\t});\n\t};\n\n\tconst handleFormSubmit = async (event) => {\n\t\tevent.preventDefault();\n\t\ttry {\n\t\t\tconst { data } = await createNewDish({\n\t\t\t\tvariables: { ...formState },\n\t\t\t});\n\t\t\twindow.location = `/dish/${data.uploadDish._id}`;\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Message>\n\t\t\t\t<Header as=\"h3\">Create a new dish</Header>\n\t\t\t</Message>\n\t\t\t<Form className=\"attached fluid segment\" onSubmit={handleFormSubmit}>\n\t\t\t\t<Form.Input\n\t\t\t\t\tlabel=\"Dish Title\"\n\t\t\t\t\tplaceholder=\"name of dish\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={formState.title}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tname=\"title\"\n\t\t\t\t/>\n\t\t\t\t<Form.Input\n\t\t\t\t\tlabel=\"Description\"\n\t\t\t\t\tplaceholder=\"description\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={formState.description}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tname=\"description\"\n\t\t\t\t/>\n\t\t\t\t<Form.Input\n\t\t\t\t\tlabel=\"Image URL\"\n\t\t\t\t\tplaceholder=\"www.example.com/image/path\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={formState.image}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tname=\"image\"\n\t\t\t\t/>\n\t\t\t\t<Form.Input\n\t\t\t\t\tlabel=\"Cook Time\"\n\t\t\t\t\tplaceholder=\"cook time\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={formState.cook_time}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tname=\"cook_time\"\n\t\t\t\t/>\n\t\t\t\t<Form.TextArea\n\t\t\t\t\tlabel=\"Dish Ingredients\"\n\t\t\t\t\tplaceholder=\"example: water, red peppers, oil...\"\n\t\t\t\t\trows={5}\n\t\t\t\t\tvalue={formState.ingredients}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tname=\"ingredients\"\n\t\t\t\t/>\n\t\t\t\t<Form.TextArea\n\t\t\t\t\tlabel=\"Dish Procedure\"\n\t\t\t\t\tplaceholder=\"example: step 1, heat water for 5 mins;\"\n\t\t\t\t\trows={5}\n\t\t\t\t\tvalue={formState.recipe}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tname=\"recipe\"\n\t\t\t\t/>\n\t\t\t\t<MainButton title=\"Submit Dish\"></MainButton>\n\t\t\t</Form>\n\t\t\t<Message attached=\"bottom\" teal>\n\t\t\t\t<Icon name=\"utensils\" />\n\t\t\t\tProperly describe the steps and ingredents need to prepare this dish.\n\t\t\t</Message>\n\t\t</div>\n\t);\n};\n\nexport default CreateDishForm;\n","import { Grid, Segment, Icon, Button } from \"semantic-ui-react\";\nimport UserAccount from \"../../components/UserAccount\";\nimport CreateDishForm from \"../../components/CreateDishForm\";\nimport { buttonStyles } from \"../../components/MainButton\";\nimport { Link } from \"react-router-dom\";\nimport Auth from \"../../utils/auth\";\n\nconst CreateDish = () => {\n\treturn (\n\t\t<Segment basic padded=\"very\">\n\t\t\t<Segment raised padded=\"very\">\n\t\t\t\t<Grid columns={2} stackable>\n\t\t\t\t\t<Grid.Row>\n\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t<UserAccount\n\t\t\t\t\t\t\t\tuserData={{ username: Auth.getUsername() }}\n\t\t\t\t\t\t\t></UserAccount>\n\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t<Grid.Column textAlign=\"right\">\n\t\t\t\t\t\t\t<Link to={`/dashboard/${Auth.getUserId()}`}>\n\t\t\t\t\t\t\t\t<Button size=\"large\" style={buttonStyles.algoButton}>\n\t\t\t\t\t\t\t\t\t<Icon name=\"arrow circle left\"></Icon> Back to dashboard\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t</Grid.Row>\n\n\t\t\t\t\t<Grid.Row>\n\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t<CreateDishForm></CreateDishForm>\n\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t<Grid.Column></Grid.Column>\n\t\t\t\t\t</Grid.Row>\n\t\t\t\t</Grid>\n\t\t\t</Segment>\n\t\t</Segment>\n\t);\n};\n\nexport default CreateDish;\n","import \"./App.css\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./pages/Home\";\nimport Dish from \"./pages/Dish\";\nimport Search from \"./pages/Search\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Dashboard from \"./pages/Auth/Dashboard\";\nimport CreateDish from \"./pages/Auth/CreateDish\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n\turi: \"/graphql\",\n\tcache: new InMemoryCache(),\n});\n\nconst App = () => {\n\treturn (\n\t\t<ApolloProvider client={client}>\n\t\t\t<BrowserRouter>\n\t\t\t\t{/* display header */}\n\t\t\t\t<Header></Header>\n\n\t\t\t\t{/* display requested pages */}\n\t\t\t\t<main>\n\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t<Home></Home>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/dish/:id\">\n\t\t\t\t\t\t<Dish></Dish>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/search/:query\">\n\t\t\t\t\t\t<Search></Search>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/login\">\n\t\t\t\t\t\t<Login></Login>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/signup\">\n\t\t\t\t\t\t<Signup></Signup>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/dashboard/:userId\">\n\t\t\t\t\t\t<Dashboard></Dashboard>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/dashboard/:userId/create-dish\">\n\t\t\t\t\t\t<CreateDish></CreateDish>\n\t\t\t\t\t</Route>\n\t\t\t\t</main>\n\n\t\t\t\t{/* display footer */}\n\t\t\t\t<Footer></Footer>\n\t\t\t</BrowserRouter>\n\t\t</ApolloProvider>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}